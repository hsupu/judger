#ifndef __JUDGER__SYSCALL_TABLE_H
#define __JUDGER__SYSCALL_TABLE_H

#ifdef linux
#include <bits/syscall.h>
#include <unistd.h>
#endif

#include <sys/syscall.h>

// find from bits/syscall.h unistd_64.h
// 0 - forbidden
// 1 - allow
// 2 - ignore
// 3 - times limited by syscall_limit
const int syscall_table[] = {
    1,1,1,1,0,    1,0,0,0,1,// 0    0 read, 1 write, 2 open, 3 close, 4 stat, 5 fstat, 6 lstat, 9 mmap
    1,1,1,1,1,    0,0,0,0,0,// 10   10 mprotect, 11 munmap, 12 brk, 13 rt_sigaction, 14 rt_sigprocmask
    0,1,0,0,0,    0,0,0,0,0,// 20   21 access
    0,0,0,0,0,    0,0,0,0,0,// 30   35 nanosleep
    0,0,0,0,0,    0,0,0,0,0,// 40
    0,0,0,0,0,    0,0,0,0,3,// 50   59 execve
    0,0,0,0,0,    0,0,0,0,0,// 60
    0,0,0,0,0,    0,0,0,0,0,// 70
    0,0,0,0,0,    0,0,0,0,0,// 80
    0,0,0,0,0,    0,0,0,0,0,// 90
    0,0,0,0,0,    0,0,0,0,0,// 100
    0,0,0,0,0,    0,0,0,0,0,// 110
    0,0,0,0,0,    0,0,0,0,0,// 120
    0,0,0,0,0,    0,0,0,0,0,// 130
    0,0,0,0,0,    0,0,0,0,0,// 140
    0,0,0,0,0,    0,0,0,1,0,// 150  158 arch_prctl
    0,0,0,0,0,    0,0,0,0,0,// 160
    0,0,0,0,0,    0,0,0,0,0,// 170
    0,0,0,0,0,    0,0,0,0,0,// 180
    0,0,0,0,0,    0,0,0,0,0,// 190
    0,0,0,0,0,    0,0,0,0,0,// 200
    0,0,0,0,0,    0,0,0,0,0,// 210
    0,0,0,0,0,    0,0,0,0,0,// 220
    0,1,0,0,0,    0,0,0,0,0,// 230  231 exit_group
    0,0,0,0,0,    0,0,0,0,0,// 240
    0,0,0,0,0,    0,0,0,0,0,// 250
    0,0,0,0,0,    0,0,0,0,0,// 260
    0,0,0,0,0,    0,0,0,0,0,// 270
    0,0,0,0,0,    0,0,0,0,0,// 280
    0,0,0,0,0,    0,0,0,0,0,// 290
    0,0,0,0,0,    0,0,0,0,0,// 300
    0,0,0,0,0,    0,0,0,0,0,// 310
    0,0,0,0,0,    0,0,0,0,0,// 320
    0,0,0,0,0,    0,0,0,0,0,// 330
    0,0,0,0,0,    0,0,0,0,0,// 340
    0,0,0,0,0,    0,0,0,0,0,// 350
    0,0,0,0,0,    0,0,0,0,0,// 360
    0,0,0,0,0,    0,0,0,0,0,// 370
    0,0,0,0,0,    0,0,0,0,0,// 380
    0,0,0,0,0,    0,0,0,0,0,// 390
    0,0,0,0,0,    0,0,0,0,0,// 400
    0,0,0,0,0,    0,0,0,0,0,// 410
    0,0,0,0,0,    0,0,0,0,0,// 420
    0,0,0,0,0,    0,0,0,0,0,// 430
    0,0,0,0,0,    0,0,0,0,0,// 440
    0,0,0,0,0,    0,0,0,0,0,// 450
    0,0,0,0,0,    0,0,0,0,0,// 460
    0,0,0,0,0,    0,0,0,0,0,// 470
    0,0,0,0,0,    0,0,0,0,0,// 480
    0,0,0,0,0,    0,0,0,0,0,// 490
};

const int syscall_limit[] = {
    0,0,0,0,0,    0,0,0,0,0,// 0
    0,0,0,0,0,    0,0,0,0,0,// 10
    0,0,0,0,0,    0,0,0,0,0,// 20
    0,0,0,0,0,    0,0,0,0,0,// 30
    0,0,0,0,0,    0,0,0,0,0,// 40
    0,0,0,0,0,    0,0,0,0,1,// 50
    0,0,0,0,0,    0,0,0,0,0,// 60
    0,0,0,0,0,    0,0,0,0,0,// 70
    0,0,0,0,0,    0,0,0,0,0,// 80
    0,0,0,0,0,    0,0,0,0,0,// 90
    0,0,0,0,0,    0,0,0,0,0,// 100
    0,0,0,0,0,    0,0,0,0,0,// 110
    0,0,0,0,0,    0,0,0,0,0,// 120
    0,0,0,0,0,    0,0,0,0,0,// 130
    0,0,0,0,0,    0,0,0,0,0,// 140
    0,0,0,0,0,    0,0,0,0,0,// 150
    0,0,0,0,0,    0,0,0,0,0,// 160
    0,0,0,0,0,    0,0,0,0,0,// 170
    0,0,0,0,0,    0,0,0,0,0,// 180
    0,0,0,0,0,    0,0,0,0,0,// 190
    0,0,0,0,0,    0,0,0,0,0,// 200
    0,0,0,0,0,    0,0,0,0,0,// 210
    0,0,0,0,0,    0,0,0,0,0,// 220
    0,0,0,0,0,    0,0,0,0,0,// 230
    0,0,0,0,0,    0,0,0,0,0,// 240
    0,0,0,0,0,    0,0,0,0,0,// 250
    0,0,0,0,0,    0,0,0,0,0,// 260
    0,0,0,0,0,    0,0,0,0,0,// 270
    0,0,0,0,0,    0,0,0,0,0,// 280
    0,0,0,0,0,    0,0,0,0,0,// 290
    0,0,0,0,0,    0,0,0,0,0,// 300
    0,0,0,0,0,    0,0,0,0,0,// 310
    0,0,0,0,0,    0,0,0,0,0,// 320
    0,0,0,0,0,    0,0,0,0,0,// 330
    0,0,0,0,0,    0,0,0,0,0,// 340
    0,0,0,0,0,    0,0,0,0,0,// 350
    0,0,0,0,0,    0,0,0,0,0,// 360
    0,0,0,0,0,    0,0,0,0,0,// 370
    0,0,0,0,0,    0,0,0,0,0,// 380
    0,0,0,0,0,    0,0,0,0,0,// 390
    0,0,0,0,0,    0,0,0,0,0,// 400
    0,0,0,0,0,    0,0,0,0,0,// 410
    0,0,0,0,0,    0,0,0,0,0,// 420
    0,0,0,0,0,    0,0,0,0,0,// 430
    0,0,0,0,0,    0,0,0,0,0,// 440
    0,0,0,0,0,    0,0,0,0,0,// 450
    0,0,0,0,0,    0,0,0,0,0,// 460
    0,0,0,0,0,    0,0,0,0,0,// 470
    0,0,0,0,0,    0,0,0,0,0,// 480
    0,0,0,0,0,    0,0,0,0,0,// 490
};

#endif /* defined(__JUDGER__SYSCALL_TABLE_H) */